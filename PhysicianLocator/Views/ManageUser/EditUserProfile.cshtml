<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css" />
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

<script src="~/Scripts/jquery-3.1.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

@model PhysicianLocator.Models.AdminUserRegViewModel
@using GridMvc.Html

<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/jquery-1.9.1.min.js")"></script>
<script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>
<link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />

<h2> Edit  Profile</h2>
@using (Html.BeginForm("EditUserProfile", "ManageUser", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#home">Personal Information</a></li>
        <li><a data-toggle="tab" href="#menu1">Address</a></li>
        <li><a data-toggle="tab" href="#menu2">Education</a></li>
        <li><a data-toggle="tab" href="#menu3">Experience</a></li>
        <li><a data-toggle="tab" href="#menu4">Health History</a></li>
        @* <li><a data-toggle="tab" href="#menu4">stats</a></li>*@
    </ul>

        <div class="form-horizontal">

            <div class="tab-content">
        @**************************Home tab****************************@
           <div id="home" class="tab-pane fade in active">
                    <h3 class="martop20">Personal Information</h3>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="avtar">
                                    <img src="@Url.Content(@ViewBag.contentpath)" style="width:100%; background: #999;
                                         margin: auto;
                                        -moz-border-radius: 50%;
                                         border-radius: 50%;
                                         padding: 2px;" />
                                    <span class="avtar-in"><i class="fa fa-camera"></i></span>
                                    <input type="file" value="Change Photo" name="uploadFile" id="uploadFile" accept=".png,.jpg,.jpeg,.gif,.tif" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control martop0" } })
                                @*@Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control martop0" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div id="example" class="form-group">
                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                @(Html.Kendo().DatePicker()
                                          .Value(Model.DateOfBirth)
                                          .Name("kendoDOB")
                                          .HtmlAttributes(new { placeholder = "Date of Birth", required = "required", validationmessage = "Enter valid date of birth", style = "width:280px" })
                                          .Footer(false)
                                          .Format("dd-MM-yyyy")
                                         )
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CellPhone, htmlAttributes: new { @class = "control-label col-md-2 required" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CellPhone, new { htmlAttributes = new { @class = "form-control martop0" } })
                                @Html.ValidationMessageFor(model => model.CellPhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @if (Request.Form["YourValue"] != null)
                        {
                            //Grab your value (since it exists)
                            var yourValue = Request.Form["YourValue"];
                        }
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="col-md-offset-2" style="margin-left: 73.666667%; ">
                            <input type="submit" value="Update" class="btn btn-default" />
                            @Html.ActionLink("Go back to profile", "ViewUserProfile", "ManageUser", new { @Id = Url.RequestContext.RouteData.Values["id"] }, new { @class = "btn btn-info pull-right" })


                        </div>
                       
                        </div>
                        
                    </div>
        @**************************Home end****************************@
                <div id="menu1" class="tab-pane fade">

                    <div class="col-md-6">
                        <h3 class="martop20">Primary Address</h3>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.Street1, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel1.Street1, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Street 1", id = "address1Street1", name = "address1Street1" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel1.Street1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.Street2, htmlAttributes: new { @class = "control-label col-md-3 " })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel1.Street2, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Street 2", id = "address1Street2", name = "address1Street2" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel1.Street2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.Street3, htmlAttributes: new { @class = "control-label col-md-3 " })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel1.Street3, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Street 3", id = "address1Street3", name = "address1Street3" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel1.Street3, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.City, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel1.City, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "City", id = "address1City", name = "address1City" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel1.City, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.State, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel1.State, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "State", id = "address1State", name = "address1State" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel1.State, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.CountryId, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">

                                @Html.ValidationMessageFor(model => model.AddressViewModel1.CountryId, "", new { @class = "text-danger" })

                                @(Html.Kendo().DropDownListFor(model => model.AddressViewModel1.CountryId)
.Name("kendoCountry")
.DataTextField("CountryName")
.DataValueField("ID")
//.Filter("contains")
//.Value(Model.CountryName1)
.HtmlAttributes(new { style = "width: 280px" })
.OptionLabel("Select Country......")
.DataSource(source => source
.Custom()
.Transport(transport => transport
.Read(read =>
{
    read.Action("CountryDropDown", "AccountManagment");
})
).ServerFiltering(true)
)
.SelectedIndex(Model.AddressViewModel1.CountryId)
                                )




                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel1.Zipcode, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel1.Zipcode, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Zipcode", id = "address1ZipCode", name = "address1ZipCode" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel1.Zipcode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                  
                    <div class="col-md-6">
                       
                        <h3 class="martop20">Secondary Address</h3>
                        <input type="checkbox" id="chkCopy" /><label>Same as primary address</label>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.Street1, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel2.Street1, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Street 1", id = "address2Street1", name = "address2Street1" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.Street1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.Street2, htmlAttributes: new { @class = "control-label col-md-3 " })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel2.Street2, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Street 2", id = "address2Street2", name = "address2Street2" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.Street2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.Street3, htmlAttributes: new { @class = "control-label col-md-3 " })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel2.Street3, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "Street 3", id = "address2Street3", name = "address2Street3" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.Street3, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.City, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel2.City, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "City ", id = "address2City", name = "address2City" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.City, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.State, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel2.State, new { htmlAttributes = new { @class = "form-control martop0", @placeholder = "State ", id = "address2State", name = "address2State" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.State, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.CountryId, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @*@Model.CountryName1*@
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.CountryId, "", new { @class = "text-danger" })
                                @(Html.Kendo().DropDownListFor(model => model.AddressViewModel1.CountryId)
.Name("kendoCountry2")
.HtmlAttributes(new { placeholder = "Date of Birth", required = "required", validationmessage = "Enter valid date of birth", style = "width:280px" })
.OptionLabel("Select Country......")
.DataTextField("CountryName")
.DataValueField("ID")
//.Filter("contains")

//.Value(model.AddressViewModel1.CountryId)
.HtmlAttributes(new { style = "width: 280px" })

//.OptionLabel("Select country...")
.DataSource(source => source
.Custom()
.Transport(transport => transport
.Read(read =>
{
    read.Action("CountryDropDown", "AccountManagment");

})

).ServerFiltering(true)
)
//.Value(Model.CountryName2)
.SelectedIndex(Model.AddressViewModel2.CountryId)

                                )


                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddressViewModel2.Zipcode, htmlAttributes: new { @class = "control-label col-md-3 required" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AddressViewModel2.Zipcode, new { htmlAttributes = new { @class = "form-control", @placeholder = "State ", id = "address2ZipCode", name = "address2ZipCode" } })
                                @Html.ValidationMessageFor(model => model.AddressViewModel2.Zipcode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="col-md-offset-2" style="margin-left: 80.666667%; ">
                        <input type="submit" value="Update" class="btn btn-default" />
                        @Html.ActionLink("Go back to profile", "ViewUserProfile", "ManageUser", new { @Id = Url.RequestContext.RouteData.Values["id"] }, new { @class = "btn btn-info pull-right" })


                    </div>
                   
                </div>
                <script>
                    $(function () {

                        $("#chkCopy").change(function () {

                            $("#address2Street1").val("");
                            $("#address2Street2").val("");
                            $("#address2Street3").val("");
                            $("#address2State").val("");
                            $("#address2City").val("");
                            $("#address2ZipCode").val("");
                            if (this.checked) {
                                $("#address2Street1").val($("#address1Street1").val())
                                $("#address2Street2").val($("#address1Street2").val())
                                $("#address2Street3").val($("#address1Street3").val())
                                $("#address2City").val($("#address1City").val())
                                $("#address2State").val($("#address1State").val())
                                $("#address2ZipCode").val($("#address1ZipCode").val())




                            }

                        });

                    });
                </script>
                <div id="menu2" class="tab-pane fade">
                    <h3 class="martop20">Education</h3>

                    @*Start*@

                    <div class="tablecontainer">
                        
                        <a class="popup btn btn-primary" href="/ManageUser/Save_education/0" style="margin-bottom:20px; margin-top:20px;">Add  Education</a>
                        <table id="myDatatable">
                            <thead>
                                <tr>
                                    <th>Institute Name</th>
                                    <th>Degree</th>
                                    <th>Year of Passing</th>
                                    <th>Action</th>
                                   
                                </tr>
                            </thead>
                        </table>
                    </div>
                    @*End*@
                    
                    <div class="col-md-offset-2" style="margin-top:10px;">                       
                        
                        @Html.ActionLink("Go back to profile", "ViewUserProfile", "ManageUser", new { @Id = Url.RequestContext.RouteData.Values["id"] }, new { @class = "btn btn-info pull-right" })


                    </div>
                </div>
                <div id="menu3" class="tab-pane fade">
                    <h3 class="martop20">Experience</h3>

                    @*Start*@

                    <div class="tablecontainer">
                        <a class="popup btn btn-primary" href="/ManageUser/Save_experience/0" style="margin-bottom:20px; margin-top:20px;">Add Experience</a>
                        <table id="myDatatable_experience">
                            <thead>
                                <tr>
                                    <th>Designation</th>
                                    <th>Reason for Leave</th>
                                    <th>Date of Joining</th>
                                    <th>Date of Leaving</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    @*End*@

                    <div class="col-md-offset-2" style="margin-top:10px;">
                      
                        @Html.ActionLink("Go back to profile", "ViewUserProfile", "ManageUser", new { @Id = Url.RequestContext.RouteData.Values["id"] }, new { @class = "btn btn-info pull-right" })
                    </div>
                </div>
                <div id="menu4" class="tab-pane fade">
                    <h3 class="martop20">Health History</h3>

                    @*Start*@

                    <div class="tablecontainer">
                        <a class="popup btn btn-primary" href="/ManageUser/Save_HealthHistory" style="margin-bottom:20px; margin-top:20px;">Add Health Details</a>
                        <table id="myDatatable_HealthHistory">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Start Date</th>
                                    <th>End Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    @*End*@
                    <div class="col-md-offset-2" style="margin-top:10px;    margin-left: 73.666667%; ">
                                            
                        @Html.ActionLink("Go back to profile", "ViewUserProfile", "ManageUser", new { @Id = Url.RequestContext.RouteData.Values["id"] }, new { @class = "btn btn-info pull-right" })
                    </div>

                </div>
            </div>
        </div>

}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <link href="~/Content/popModal.css" rel="stylesheet" />
    <script src="~/Scripts/popModal.js"></script>
    <script>
        $(document).ready(function () {

            //$("#kendoDOB").kendoDatePicker(
            //    {
            //        footer: false,
            //        Format: "dd-MM-yyyy"
            //    });

            $("#kendoDOB").bind("focus", function () {
                $(this).data("kendoDatePicker").open();
            });
        });

        //$("form").kendoValidator({

        //    rules: {
        //        'kendoDOB': function (input) {
        //            var date = $("#kendoDOB").val()
        //            if (date != "") {
                   
        //                var current = new Date();
        //                var kendoyear = kendo.toString($("#kendoDOB").data("kendoDatePicker").value(), 'yyyy');
        //                var currentyear = current.getFullYear();
        //                var calculatedyaer = currentyear - kendoyear;
             
        //                if (calculatedyaer <= 21) {
                           
        //                    return false;
        //                }
        //            }

        //            return true;
        //        }
        //    },
        //    messages: {
        //        'kendoDOB': function (input) {
        //            required: "Degree is mandatory!"
        //            //if (date != "") {
        //            //alert("ddddddd");
        //            return input.attr("ggggggg");
        //            //}
        //        }

        //    }

        //});
        function deleteEdu(id) {
            if (confirm('Are You Sure?')) {
                return window.location = "https:/ManageUser/Delete_education/" + id;
            } else {
                alert("You are not redirected.")
            }
        }

        $(document).ready(function () {
           
            var oTable = $('#myDatatable').DataTable({
                "bPaginate": false,
                "bLengthChange": false,
                "ordering": false,
                "bInfo": false,
                "bAutoWidth": false,
                
                "ajax": {
                    "url": '/ManageUser/GetEducationlist',
                    "type" : "get",
                    "datatype" : "json"
                },
                "columns": [
                    { "data": "InstituteName", "autoWidth": true },
                    { "data": "Degree", "autoWidth": true },
                    {
                            "data": "StartDate", type: 'date-dd-mmm-yyyy', targets: 0, "render": function (data) {
                             var d = new Date(parseInt(data.substr(6)));
                             var result = "";
                             return ( + d.getFullYear() );
                     }
                     },

                    {
                        "data": "EduId","autoWidth": true, "render": function (data) {
                            return '<a  class="popup btn" href="/ManageUser/Edit_education/' + data + '"><i class="fa fa-pencil"></i></a> <a class="popup btn" href="/ManageUser/Delete_education/' + data + '">  <i class="fa fa-trash"></i></a>';
                         
                        }
                    },
                   
                ]
            })
            
          
            $('.tablecontainer').on('click', 'a.popup', function (e) { 
                e.preventDefault();
                OpenPopup($(this).attr('href'));
            })
           
            function OpenPopup(pageUrl) {
                var $pageContent = $('<div/>');
                $pageContent.load(pageUrl, function () {
                    $('#popupForm', $pageContent).removeData('validator');
                    $('#popupForm', $pageContent).removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse('form');
                });

                $dialog = $('<div class="popupWindow" style="overflow:auto height:auto"></div>')
                          .html($pageContent)
                          .dialog({
                              draggable : false,
                              autoOpen : false,
                              resizable : false,
                              model: true,
                              
                              height : 550,
                              width : 600,
                              close: function () {
                                  $dialog.dialog('destroy').remove();
                              }
                          })

                $('.popupWindow').on('submit', '#popupForm', function (e) {
                    var url = $('#popupForm')[0].action;
                    $.ajax({
                        type : "POST",
                        url : url,
                        data: $('#popupForm').serialize(),
                        success: function (data) {
                            if (data.status) {
                                $dialog.dialog('close');
                                oTable.ajax.reload();
                            }
                        }
                    })

                    e.preventDefault();
                })

                $dialog.dialog('open');
            }
        })

    //start expereince jquery
        $(document).ready(function () {
        
            var oTable = $('#myDatatable_experience').DataTable({
                "bPaginate": false,
                "bLengthChange": false,
                "ordering": false,
                "bFilter": true,
                "bInfo": false,
                "bAutoWidth": false,
                "ajax": {
                    "url": '/ManageUser/GetExperiencelist',
                    "type": "get",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "Designation", "autoWidth": true },
                    { "data": "ReasonForLeaving", "autoWidth": true },
                    {
                        "data": "JoinStartDate", type: 'date-dd-mmm-yyyy', targets: 0, "render": function (data) {

                            var d = new Date(parseInt(data.substr(6)));
                            var result = "";

                            return (+d.getUTCDay() + '-' + d.getUTCMonth() + '-' + d.getFullYear());
                        }
                    },
                    {
                        "data": "JoinEndDate", type: 'date-dd-mmm-yyyy', targets: 0, "render": function (data) {

                            var d = new Date(parseInt(data.substr(6)));
                            var result = "";

                            return (+d.getUTCDay() + '-' + d.getUTCMonth() + '-' + d.getFullYear());
                        }
                    },
                    {
                        "data": "ExpId", "autoWidth": true, "render": function (data) {
                            
                            return '<a class="popup btn" href="/ManageUser/Edit_experience/' + data + '"><i class="fa fa-pencil"></i></a> <a class="popup btn" href="/ManageUser/Delete_experience/' + data + '"><i class="fa fa-trash"></i></a>';
                       }
                    },
                    
                ]
            })

           
          
            $('.tablecontainer1').on('click', 'a.popup', function (e) {
                e.preventDefault();
                OpenPopup($(this).attr('href'));
            })
            function OpenPopup(pageUrl) {
                var $pageContent = $('<div/>');
                $pageContent.load(pageUrl, function () {
                    $('#popupForm', $pageContent).removeData('validator');
                    $('#popupForm', $pageContent).removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse('form');
                });

                $dialog = $('<div class="popupWindow" style="overflow:auto"></div>')
                          .html($pageContent)
                          .dialog({
                              draggable: false,
                              autoOpen: false,
                              resizable: false,
                              model: true,
                            
                              height: 550,
                              width: 600,
                              close: function () {
                                  $dialog.dialog('destroy').remove();
                              }
                          })

                $('.popupWindow').on('submit', '#popupForm', function (e) {
                    var url = $('#popupForm')[0].action;
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: $('#popupForm').serialize(),
                        success: function (data) {
                            if (data.status) {
                                $dialog.dialog('close');
                                oTable.ajax.reload();
                            }
                        }
                    })

                    e.preventDefault();
                })

                $dialog.dialog('open');
            }
        })
    //end expereince jquery

        //start Health jquery
        $(document).ready(function () {
            var oTable = $('#myDatatable_HealthHistory').DataTable({
                "bPaginate": false,
                "bLengthChange": false,
                "bFilter": true,
                "bInfo": false,
                "bAutoWidth": false,
                "ajax": {
                    "url": '/ManageUser/GetHealthHistorylist',
                    "type": "get",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "Type", "autoWidth": true },
                    { "data": "Description", "autoWidth": true },
                    {
                        "data": "StartDate", type: 'date-dd-mmm-yyyy', targets: 0, "render": function (data) {

                            var d = new Date(parseInt(data.substr(6)));
                            var result = "";

                            return (+d.getUTCMonth() + '-' + d.getUTCDay() + '-' + d.getFullYear());
                        }
                    },
                    {
                        "data": "EndDate", type: 'date-dd-mmm-yyyy', targets: 0, "render": function (data) {

                            var d = new Date(parseInt(data.substr(6)));
                            var result = "";

                            return (+d.getUTCMonth() + '-' + d.getUTCDay() + '-' + d.getFullYear());
                        }
                    },

                    {
                        "data": "HealthId", "width": "50px", "render": function (data) {
                            return '<a class="popup" href="/ManageUser/Edit_HealthHistory/' + data + '"><i class="fa fa-pencil"></a> <a class="popup" href="/ManageUser/Delete_HealthHistory/' + data + '"><i class="fa fa-trash"></a>';
                        }
                    },
                    {
                        "data": "HealthId", "width": "50px", "render": function (data) {
                            return '<a class="popup" href="/ManageUser/Delete_HealthHistory/' + data + '">Delete</a>';
                        }
                    }
                ]
            })

            $('.tablecontainer2').on('click', 'a.popup', function (e) {
                e.preventDefault();
                OpenPopup($(this).attr('href'));
            })
            function OpenPopup(pageUrl) {
                var $pageContent = $('<div/>');
                $pageContent.load(pageUrl, function () {
                    $('#popupForm', $pageContent).removeData('validator');
                    $('#popupForm', $pageContent).removeData('unobtrusiveValidation');
                    $.validator.unobtrusive.parse('form');

                });

                $dialog = $('<div class="popupWindow" style="overflow:auto"></div>')
                          .html($pageContent)
                          .dialog({
                              draggable: false,
                              autoOpen: false,
                              resizable: false,
                              model: true,
                              title: 'Experience',
                              height: 550,
                              width: 600,
                              close: function () {
                                  $dialog.dialog('destroy').remove();
                              }
                          })

                $('.popupWindow').on('submit', '#popupForm', function (e) {
                    var url = $('#popupForm')[0].action;
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: $('#popupForm').serialize(),
                        success: function (data) {
                            if (data.status) {
                                $dialog.dialog('close');
                                oTable.ajax.reload();
                            }
                        }
                    })

                    e.preventDefault();
                })

                $dialog.dialog('open');
            }
        })
        //end Health jquery

        //for image change

        function uploadStarted() {
            $get("imgDisplay").style.display = "none";
        }
        $("#example").kendoValidator({
            rules: {
                dateValidation: function (element) {
                    var value = $("#kendoDOB").val();

                    var date = kendo.parseDate(value);
                    var kendoyear = kendo.toString($("#kendoDOB").data("kendoDatePicker").value(), 'dd-MM-yyyy');
                    //alert(kendoyear);
                    if (!kendoyear) {
                        return false;
                    }

                    return true;
                },
                minDate: function (element) {
                    var value = $(element).val();
                    var kendoyear = kendo.toString($("#kendoDOB").data("kendoDatePicker").value(), 'yyyy');
                    //var date = kendo.parseDate(value)
                    var current = new Date();
                    var currentyear = current.getFullYear();
                    //alert(currentyear);
                    var calculatedyaer = currentyear - kendoyear;
                    if (calculatedyaer <= 21) {
                        //alert(calculatedyaer);

                        return false;
                    }
                    return true;
                }
            },
            messages: {
                dateValidation: "You must enter a date",
                minDate: "The age should be greater than 21"
            }
        });
   
    </script>

}

<style>
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 99999; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content/Box */
    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 2px;
        border: 1px solid #888;
        width: 100%; /* Could be more or less, depending on screen size */
        padding-left: 5px !important;
    }

    /* The Close Button */
    .close {
        color: #aaa;
        float: right;
        font-size: 30px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .required:before {
        content: "*";
        font-weight: bold;
        font-size: large;
        color: red;
    }
</style>
