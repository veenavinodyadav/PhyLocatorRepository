@model PhysicianLocator.Models.PhysicianExperienceViewModel

@{
    ViewBag.Title = "Save_experience";
    Layout = null;
}

<h2>Add Experience</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.HospitalId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">              
              @Html.ValidationMessageFor(model => model.HospitalId, "", new { @class = "text-danger" })

              @(Html.Kendo().AutoComplete()
              .Name("kendoHospitalId")
               .HtmlAttributes(new { placeholder = "Hospital Name", required = "Hospital Name", validationmessage = "Please enter hospital name", style = "width:280px" })
              .Filter("contains")
              .MinLength(3)          
              )
        </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CurrentWorkingHospital, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CurrentWorkingHospital)
                    @Html.ValidationMessageFor(model => model.CurrentWorkingHospital, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReasonForLeaving, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReasonForLeaving, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReasonForLeaving, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JoinStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().DatePicker()
                          .Name("kendoJSD")
                          .HtmlAttributes(new { placeholder = "Date of Joining", required = "Date of Joining", validationmessage = "Please pick date of joining", style = "width:280px" })

                          .Format("dd-MM-yyyy")
                          .Events(e => e
                          .Open(@<text>
                            function()
                            {
                            //Handle the open event inline.
                            }
                        </text>)

                          .Change(@<text>
                                function()
                                {
                                //Handle the change event inline.
                                }
                        </text>)
                         ))
                @Html.ValidationMessageFor(model => model.JoinStartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JoinEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().DatePicker()
                          .Name("kendoJED")
                          .HtmlAttributes(new { placeholder = "Date of Leaving", required = "required", validationmessage = "Please pick date of leaving", style = "width:280px" })
                          .Format("dd-MM-yyyy")
                          .Events(e => e
                          .Open(@<text>
                            function()
                            {
                            //Handle the open event inline.
                            }
                        </text>)

                          .Change(@<text>
                                function()
                                {
                                //Handle the change event inline.
                                }
                        </text>)
                         ))
                @Html.ValidationMessageFor(model => model.JoinEndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
                <input type="button" value="Cancel" id="clsbutton" name="clsbutton" class="btn btn-default" , onclick="Closepopup()" />
            </div>
        </div>
    </div>
}

<script>
            $(function () {
                $("form").kendoValidator();
            });

            function Closepopup() {
                $(".ui-dialog-titlebar-close").click();
            }

                $(document).ready(function () {
                    var data =@Html.Raw(ViewBag.Markers);
                    //create AutoComplete UI component
                    $("#kendoHospitalId").kendoAutoComplete({
                        dataSource: data,
                        filter: "startswith",                     
                        change: function () {
                            var found = false;
                            var value = this.value();
                            var data = this.dataSource.view();

                            for (var idx = 0, length = data.length; idx < length; idx++) {
                                if (data[idx] === value) {
                                    found = true;
                                    break;
                                }
                            }

                            if (!found) {
                                this.value("");
                                alert("Custom values are not allowed");
                            }
                        }
                    });
                });

</script>
