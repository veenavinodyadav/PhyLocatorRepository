@model PhysicianLocator.Models.EmailTemplateViewModel
@{
    ViewBag.Title = "Edit_email";
    Layout = null;
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h2>Edit Template</h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.templateid)

        <div class="form-group">
            @Html.LabelFor(model => model.templateCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.templateCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.templateCode, "", new { @class = "text-danger" })
            </div>
        </div>

     

        <div class="form-group">
            @Html.LabelFor(model => model.From, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.From, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bcc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bcc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bcc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.templateContent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ValidationMessageFor(model => model.templateContent, "", new { @class = "text-danger" })
                @Html.TextAreaFor(model => model.templateContent, new { htmlAttributes = new { @class = "form-control" } })


                @*@(Html.Kendo().Editor()
                 .Name("editor")
                 .HtmlAttributes(new { style = "height:40px" })
                 .Resizable(resizable => resizable.Content(true))
                 .Tools(tools => tools
                  .Clear()
                  .Bold().Italic().Underline().Strikethrough()
                .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull().CleanFormatting().FontName()
                .CreateLink().Unlink()
               //.InsertImage()
               //.TableEditing()
               .FontColor().BackColor())
               .Value(@<text>
              
                    @Html.Raw(HttpUtility.HtmlDecode(Model.templateContent))
              
               
            </text>)
                )*@
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


      

        <div class="">
            <div class="col-md-offset-4 col-md-8">
                <input type="submit" value="Save" class="btn btn-default" />
                <input type="button" value="Cancel" id="clsbutton" name="clsbutton" class="btn btn-default" , onclick="Closepopup()" />



            </div>
        </div>
    </div>
}
<script>
    function Closepopup() {
        $(".ui-dialog-titlebar-close").click();
    }
</script>

